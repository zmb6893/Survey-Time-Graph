{"ast":null,"code":"var _jsxFileName = \"/Users/zoebingham/Projects/time-availability/src/views/MultilineChart.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as d3 from \"d3\";\n/**\n * Uncontrolled component that graphs a MultilineChart given a data set and dimensions of the graph.\n * @param {*} param0 \n * @returns \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultilineChart = _ref => {\n  _s();\n\n  let {\n    data,\n    dimensions\n  } = _ref;\n  // Create a reference to the svg for later\n  const svgRef = React.useRef(null); // Set the dimensions of the graph\n\n  const {\n    width,\n    height,\n    margin\n  } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom; // Update the MultilineChart component\n\n  React.useEffect(() => {\n    // Create the x-axis with a time scale based on the date from data\n    const xScale = d3.scaleTime().domain(d3.extent(data[0].items, d => d.date)).range([0, width]); // Create the y-axis with a linear scale based on the value from data\n\n    const yScale = d3.scaleLinear().domain([d3.min(data[0].items, d => d.value) - 50, d3.max(data[0].items, d => d.value) + 50]).range([height, 0]); // Create root container where we will append all other chart elements\n\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n\n    const svg = svgEl.append(\"g\").attr(\"transform\", `translate(${margin.left},${margin.top})`); // Add X grid lines with labels\n\n    const xAxis = d3.axisBottom(xScale).ticks(5).tickSize(-height + margin.bottom);\n    const xAxisGroup = svg.append(\"g\").attr(\"transform\", `translate(0, ${height - margin.bottom})`).call(xAxis);\n    xAxisGroup.select(\".domain\").remove();\n    xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    xAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\"); // Add Y grid lines with labels\n\n    const yAxis = d3.axisLeft(yScale).ticks(5).tickSize(-width).tickFormat(val => `${val}%`);\n    const yAxisGroup = svg.append(\"g\").call(yAxis);\n    yAxisGroup.select(\".domain\").remove();\n    yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n    yAxisGroup.selectAll(\"text\").attr(\"opacity\", 0.5).attr(\"color\", \"white\").attr(\"font-size\", \"0.75rem\"); // Draw the lines\n\n    const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.value));\n    svg.selectAll(\".line\").data(data).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", d => d.color).attr(\"stroke-width\", 3).attr(\"d\", d => line(d.items));\n  }, [data]); // Redraw chart if data changes\n  // Return the new svg component\n\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    ref: svgRef,\n    width: svgWidth,\n    height: svgHeight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 10\n  }, this);\n};\n\n_s(MultilineChart, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n\n_c = MultilineChart;\nexport default MultilineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultilineChart\");","map":{"version":3,"names":["React","d3","MultilineChart","data","dimensions","svgRef","useRef","width","height","margin","svgWidth","left","right","svgHeight","top","bottom","useEffect","xScale","scaleTime","domain","extent","items","d","date","range","yScale","scaleLinear","min","value","max","svgEl","select","current","selectAll","remove","svg","append","attr","xAxis","axisBottom","ticks","tickSize","xAxisGroup","call","yAxis","axisLeft","tickFormat","val","yAxisGroup","line","x","y","enter","color"],"sources":["/Users/zoebingham/Projects/time-availability/src/views/MultilineChart.js"],"sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\n \n/**\n * Uncontrolled component that graphs a MultilineChart given a data set and dimensions of the graph.\n * @param {*} param0 \n * @returns \n */\nconst MultilineChart = ({ data, dimensions }) => {\n  // Create a reference to the svg for later\n  const svgRef = React.useRef(null);\n\n  // Set the dimensions of the graph\n  const { width, height, margin } = dimensions;\n  const svgWidth = width + margin.left + margin.right;\n  const svgHeight = height + margin.top + margin.bottom;\n \n  // Update the MultilineChart component\n  React.useEffect(() => {\n    // Create the x-axis with a time scale based on the date from data\n    const xScale = d3.scaleTime()\n      .domain(d3.extent(data[0].items, (d) => d.date))\n      .range([0, width]);\n\n    // Create the y-axis with a linear scale based on the value from data\n    const yScale = d3.scaleLinear()\n      .domain([\n        d3.min(data[0].items, (d) => d.value) - 50,\n        d3.max(data[0].items, (d) => d.value) + 50\n      ])\n      .range([height, 0]);\n\n    // Create root container where we will append all other chart elements\n    const svgEl = d3.select(svgRef.current);\n    svgEl.selectAll(\"*\").remove(); // Clear svg content before adding new elements \n    const svg = svgEl\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n   // Add X grid lines with labels\n   const xAxis = d3.axisBottom(xScale)\n     .ticks(5)\n     .tickSize(-height + margin.bottom);\n   const xAxisGroup = svg.append(\"g\")\n     .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n     .call(xAxis);\n   xAxisGroup.select(\".domain\").remove();\n   xAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n   xAxisGroup.selectAll(\"text\")\n     .attr(\"opacity\", 0.5)\n     .attr(\"color\", \"white\")\n     .attr(\"font-size\", \"0.75rem\");\n\n   // Add Y grid lines with labels\n   const yAxis = d3.axisLeft(yScale)\n     .ticks(5)\n     .tickSize(-width)\n     .tickFormat((val) => `${val}%`);\n   const yAxisGroup = svg.append(\"g\").call(yAxis);\n   yAxisGroup.select(\".domain\").remove();\n   yAxisGroup.selectAll(\"line\").attr(\"stroke\", \"rgba(255, 255, 255, 0.2)\");\n   yAxisGroup.selectAll(\"text\")\n     .attr(\"opacity\", 0.5)\n     .attr(\"color\", \"white\")\n     .attr(\"font-size\", \"0.75rem\");\n     \n    // Draw the lines\n    const line = d3.line()\n      .x((d) => xScale(d.date))\n      .y((d) => yScale(d.value));\n    svg.selectAll(\".line\")\n      .data(data)\n      .enter()\n      .append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", (d) => d.color)\n      .attr(\"stroke-width\", 3)\n      .attr(\"d\", (d) => line(d.items));\n  }, [data]); // Redraw chart if data changes\n \n  // Return the new svg component\n  return <svg ref={svgRef} width={svgWidth} height={svgHeight} />;\n};\n \nexport default MultilineChart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}