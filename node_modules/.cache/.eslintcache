[{"/Users/zoebingham/Projects/Survey-Time-Graph/src/index.js":"1","/Users/zoebingham/Projects/Survey-Time-Graph/src/App.js":"2","/Users/zoebingham/Projects/Survey-Time-Graph/src/views/Heatmap.js":"3"},{"size":254,"mtime":1657433021168,"results":"4","hashOfConfig":"5"},{"size":8320,"mtime":1657725220055,"results":"6","hashOfConfig":"5"},{"size":5945,"mtime":1657725612558,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"121266x",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"/Users/zoebingham/Projects/Survey-Time-Graph/src/index.js",[],[],"/Users/zoebingham/Projects/Survey-Time-Graph/src/App.js",["19","20","21","22","23","24","25","26","27"],[],"/** App.js */\nimport React, { useState } from \"react\";\n\n// Custom components\nimport Heatmap from \"./views/Heatmap\";\n\n// Styling\nimport \"./styles.css\";\n\n// Set the dimensions of the graph\nconst dimensions = {\n  width: 600,\n  height: 300,\n  margin: {\n    top: 30,\n    right: 30,\n    bottom: 30,\n    left: 60\n  }\n};\n\nconst weight = {\n  \"Never\": 0,\n  \"Once or Twice\": 1,\n  \"Occasionally\": 2,\n  \"Often\": 3,\n  \"Always\": 4\n}\n\nexport default function App() {  \n  // Hooks\n  const [graphColor, setGraphColor] = useState(\"red\");\n\n  const [csvFile, setCsvFile] = useState();\n\n  const [theme, setTheme] = useState({\n    backgroundColor: 'black',\n    border: '1px solid white',\n    textColor: 'white'\n  });\n\n  let jsonData = {\n    'Sunday': {day: 'Sun', dayValue: 0, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n    'Monday': {day: 'Mon', dayValue: 1, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n    'Tuesday': {day: 'Tue', dayValue: 2, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n    'Wednesday': {day: 'Wed', dayValue: 3, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n    'Thursday': {day: 'Thu', dayValue: 4, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n    'Friday': {day: 'Fri', dayValue: 5, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n    'Saturday': {day: 'Sat', dayValue: 6, am: [0,0,0,0,0,0,0,0,0,0,0,0], pm: [0,0,0,0,0,0,0,0,0,0,0,0]},\n  };\n\n  var parsedJsonData = new Array(\n    jsonData['Sunday'],\n    jsonData['Monday'],\n    jsonData['Tuesday'],\n    jsonData['Wednesday'],\n    jsonData['Thursday'],\n    jsonData['Friday'],\n    jsonData['Saturday'],\n  );\n\n  const fileReader = new FileReader(csvFile);\n\n  const handleOnCSVFileAdded = (e) => {\n    setCsvFile(e.target.files[0]);\n  }\n\n  const handleOnCSVFileSubmitted = (e) => {\n        e.preventDefault(); // prevents the app from reloading all components and other default behavior\n\n        fileReader.onload = function (event) {\n\n          const array = (event.target.result).split(\"\\n\");\n\n          /* Store the converted result into an array */\n          const csvToJsonResult = [];\n\n          /* Store the CSV column headers into seprate variable */\n          const headers = array[0].split(\", \");\n          const data = headers[0].split('\\n');\n          const header = data[0].split(',');\n          \n          let headerArray = new Array();\n\n          for (let entry in header){\n            let currentEntry = header[entry].replace(/['\"]+/g, '');\n            \n            headerArray.push(currentEntry.replace(/['\"]+/g, '').replace(\"Check all time slots you are available for. [\",'').replace(']',''));\n            \n          }\n\n          var currentWeight = 0;\n          // Loop over the rest of the rows\n          for (let i = 1; i < array.length - 1; i++) {\n            // Add each of the entries to a json\n            let responses = array[i].split(',');\n                        \n            for (let response in responses){\n              \n              // Split the response into multiple properties\n              console.log(headerArray[response]);\n              let properties = responses[response].split(';');\n              \n              // Get each individual property of the response\n              for (let property in properties){\n                // This is either the day or likliehood of attendance\n                let field = properties[property].replace(/['\"]+/g, '').replace(/[^a-zA-Z ]/g, \"\")\n\n                // Translate the likliehood of attendance to a weight\n                if (header[response].replace(/['\"]+/g, '') == \"How often do you think youll attend SI sessions\"){\n                  currentWeight = weight[field]; // Replace all special characters with empty string\n                }\n                // Add the weight to the json file \n                else if ((header[response].replace(/['\"]+/g, '') != \"Timestamp\" || header[response].replace(/['\"]+/g, '') != \"What is your RIT email?\") && response > 2 && field){\n                  if (response-3 < 12){\n                    console.log(\"time:\" + headerArray[response]);\n                    jsonData[field].am[response-3] += currentWeight;\n                    console.log(\"day: \" + JSON.stringify(jsonData[field]));\n                  } else if (response-3 > 12){\n                    console.log(\"time:\" + headerArray[response]);\n                    jsonData[field].pm[response-3] += currentWeight;\n                    console.log(\"day: \" + JSON.stringify(jsonData[field]));\n                  }\n                }\n                 console.log(\"\\t\" + properties[property].replace(/['\"']+/g,''));\n              }\n              console.log(currentWeight);\n            }\n            console.log();\n\n          }\n          \n          //console.log(JSON.stringify(jsonData));\n          console.log(parsedJsonData);\n          //console.log(JSON.parse(JSON.stringify(parsedJsonData[0])));\n          console.log(parsedJsonData);\n          console.log(typeof parsedJsonData);\n        };\n\n        \n        const csvString = fileReader.readAsText(csvFile);\n\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Time Availability Chart</h1>\n      <div style={{display: 'flex', flexDirection: 'row'}}>\n        <div>\n          <Heatmap graphColor={graphColor} theme={theme} data={parsedJsonData}/>\n        </div>\n          <div>\n            <h2>Instructions:</h2>\n            <ol>\n              <li>Make a copy of the <a href=\"https://docs.google.com/forms/d/1Q9GmCV1sBuWhfXHPwB5gfENiLMtLGXoYc9uOl0DU2Sw/edit?usp=sharing\" target=\"_blank\" rel=\"noreferrer noopener\" color = \"red\">Google Form</a> and have members of your group fill it out.</li>\n              \n              <li>Export the file from google forms as a csv file once all the responses are collected.</li>\n              <li>Upload the same csv file to this page.</li>\n              <li>Make customizations to the graph.</li>\n              <li>View the graph.</li>\n            </ol>\n\n            <h2>Upload a CSV File:</h2>\n            <form>\n              <input type={\"file\"} accept={\".csv\"} onChange={handleOnCSVFileAdded}/>\n              <h1></h1>\n              <button style={{background:\"deepskyblue\", border:\"blue\", color:\"white\", width:100, height:30}} onClick={handleOnCSVFileSubmitted}>Upload</button>\n            </form>\n\n            <div>\n              <h2>Customizations:</h2>\n                <div>\n                  <p>Select desired graph color: </p>\n                  <select onChange={(e) => {setGraphColor(e.target.value);}}>\n                    <option value=\"red\">red</option>\n                    <option value=\"orange\">orange</option>\n                    <option value=\"yellow\">yellow</option>\n                    <option value=\"lime\">green</option>\n                    <option value=\"DeepSkyBlue\">blue</option>\n                    <option value=\"magenta\">magenta</option>\n                    <option value=\"white\">white</option>\n                    <option value=\"black\">black</option>\n                  </select>\n                </div>\n\n                <div>\n                  <p>Set the light theme of the graph:</p>\n                  <select onChange={(e) => {if(e.target.value === \"darkMode\"){setTheme({backgroundColor: 'black', border: '1px solid white', textColor: 'white'});} if(e.target.value === \"lightMode\"){setTheme({backgroundColor: 'white', border: '1px solid red', textColor: 'black'})}}}>\n                    <option value=\"darkMode\">dark</option>\n                    <option value=\"lightMode\">light</option>\n                  </select>\n                </div>\n\n                <div>\n                  <p>Set the weight of each response (0-100)</p>\n                  <input type={\"text\"} placeholder=\"Never\" style={{width:40}}/>\n                  <input type={\"text\"} placeholder=\"Once or Twice\" style={{width:40}}/>\n                  <input type={\"text\"} placeholder=\"Often\" style={{width:40}}/>\n                  <input type={\"text\"} placeholder=\"Almost Always\" style={{width:40}}/>\n                  <input type={\"text\"} placeholder=\"Always\" style={{width:40}}/>\n                </div>\n            </div>\n\n          </div>\n      </div>\n      <p>See more of my projects at <a href=\"https://zoe-bingham.com\" target=\"_blank\" rel=\"noreferrer noopener\">zoe-bingham.com</a></p>      \n    </div>\n  );\n}\n","/Users/zoebingham/Projects/Survey-Time-Graph/src/views/Heatmap.js",["28","29"],[],"import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { selectAll, svg } from 'd3';\n\n/**\n * Creates an svg to represent the time availability based on google form data.\n * @param {*} param0 \n * @returns \n * @author Zoe Bingham\n */\nconst Heatmap = ({graphColor, theme}) => {\n\n    // Create a reference for our svg\n    const Chart = useRef();\n\n    // Set the dimensions of the chart svg\n    const dimensions = {\n        width: 700,\n        height: 500,\n        margin: {top:50, left:30, bottom:50, right:150}\n    }\n\n    const cellSize = 30;\n\n    // Sample data\n    function generateValues() {\n        return Array.from({length:12}, () => (Math.floor(Math.random()*100)+1)/100)\n    }\n\n    const data = [\n        {day: 'Sun', dayValue: 0, am: generateValues(), pm: generateValues()},\n        {day: 'Mon', dayValue: 1, am: generateValues(), pm: generateValues()},\n        {day: 'Tue', dayValue: 2, am: generateValues(), pm: generateValues()},\n        {day: 'Wed', dayValue: 3, am: generateValues(), pm: generateValues()},\n        {day: 'Thu', dayValue: 4, am: generateValues(), pm: generateValues()},\n        {day: 'Fri', dayValue: 5, am: generateValues(), pm: generateValues()},\n        {day: 'Sat', dayValue: 6, am: generateValues(), pm: generateValues()}\n    ]\n\n\n    const timeData = [\n        {time: '12:00-1:00', timeValue: 0},\n        {time: '1:00-2:00', timeValue: 1},\n        {time: '2:00-3:00', timeValue: 2},\n        {time: '3:00-4:00', timeValue: 3},\n        {time: '4:00-5:00', timeValue: 4},\n        {time: '5:00-6:00', timeValue: 5},\n        {time: '6:00-7:00', timeValue: 6},\n        {time: '7:00-8:00', timeValue: 7},\n        {time: '8:00-9:00', timeValue: 8},\n        {time: '9:00-10:00', timeValue: 9},\n        {time: '10:00-11:00', timeValue: 10},\n        {time: '11:00-12:00', timeValue: 11}\n    ]\n\n    useEffect( () => {\n        // Define the size and posision of our svg\n        const svg = d3.select(Chart.current)\n                        .attr('width', dimensions.width)\n                        .attr('height', dimensions.height)\n                        .style('background-color', theme.backgroundColor)\n                        .style('border', theme.border)\n        \n        // Create the x-scale\n        const x = d3.scaleLinear()\n                    .domain([0, data.length])\n                    .range([0, dimensions.width - dimensions.margin.right])\n\n        // Create the y-scale\n        const y = d3.scaleLinear()\n                    .domain([0, timeData.length])\n                    .range([0, dimensions.height-dimensions.margin.top-dimensions.margin.bottom])\n\n        // Add the labels for the days\n        svg.append('g')\n            .selectAll('text')\n            .data(data)\n            .join('text')\n            .text( d => `${d.day}`)\n            .attr('x', (d) => x(d.dayValue) + 20 + dimensions.margin.left + 100) \n            .attr('y', dimensions.height - dimensions.margin.bottom)\n            .attr('fill', theme.textColor)\n        \n        // Add the labels for the times\n        svg.append('g')\n            .selectAll('text')\n            .data(timeData)\n            .join('text')\n            .text( d => `${d.time}`)\n            .attr('x', dimensions.margin.left) \n            .attr('y', (d) => y(d.timeValue) + dimensions.margin.top + 15)\n            .attr('fill', theme.textColor)\n\n        // Draw blocks\n        data.forEach((day, i) => {\n\n            // Clean off previous color. This is necessary because the colors would stack up on each other when the graphcolor changed.\n            // AM\n            svg.append('g')\n                .selectAll('rect')\n                .data(day.am)\n                .join('rect')\n                .attr('x', x(day.dayValue) + 5 + dimensions.margin.left + 100)\n                .attr('y', (d,j) => j*(cellSize + 2) + dimensions.margin.top)\n                .attr('width', cellSize)\n                .attr('height', cellSize)\n                .attr('fill', theme.backgroundColor)\n                .attr('fill-opacity', 1)\n            \n            // PM \n            svg.append('g')\n                .selectAll('rect')\n                .data(day.pm)\n                .join('rect')\n                .attr('x', x(day.dayValue) + cellSize + 7 + dimensions.margin.left + 100)\n                .attr('y', (d,j) => j*(cellSize + 2) + dimensions.margin.top)\n                .attr('width', cellSize)\n                .attr('height', cellSize)\n                .attr('fill', theme.backgroundColor)\n                .attr('fill-opacity', 1)\n\n            // Repaint\n            // AM\n            svg.append('g')\n                .selectAll('rect')\n                .data(day.am)\n                .join('rect')\n                .attr('x', x(day.dayValue) + 5 + dimensions.margin.left + 100)\n                .attr('y', (d,j) => j*(cellSize + 2) + dimensions.margin.top)\n                .attr('width', cellSize)\n                .attr('height', cellSize)\n                .attr('fill', graphColor)\n                .attr('fill-opacity', d => (d).toString())\n            \n            // PM \n            svg.append('g')\n                .selectAll('rect')\n                .data(day.pm)\n                .join('rect')\n                .attr('x', x(day.dayValue) + cellSize + 7 + dimensions.margin.left + 100)\n                .attr('y', (d,j) => j*(cellSize + 2) + dimensions.margin.top)\n                .attr('width', cellSize)\n                .attr('height', cellSize)\n                .attr('fill', graphColor)\n                .attr('fill-opacity', d => (d).toString())\n        })\n    });\n\n    \n\n    return (\n        <div>\n            <h2> Best Time Availability </h2>\n            <svg ref={Chart}/>\n            <p>How to read the graph: The darkest hues indicate the best meeting times, while the lighter hues indicate less optimal meeting times.</p>\n            <p>**Note: Left side of each day is AM and right side is PM**</p>\n        </div>\n    );\n}\n\nexport default Heatmap;",{"ruleId":"30","severity":1,"message":"31","line":11,"column":7,"nodeType":"32","messageId":"33","endLine":11,"endColumn":17},{"ruleId":"34","severity":1,"message":"35","line":52,"column":24,"nodeType":"36","messageId":"37","endLine":60,"endColumn":4},{"ruleId":"30","severity":1,"message":"38","line":76,"column":17,"nodeType":"32","messageId":"33","endLine":76,"endColumn":32},{"ruleId":"34","severity":1,"message":"35","line":83,"column":29,"nodeType":"36","messageId":"37","endLine":83,"endColumn":40},{"ruleId":"39","severity":1,"message":"40","line":110,"column":60,"nodeType":"41","messageId":"42","endLine":110,"endColumn":62},{"ruleId":"39","severity":1,"message":"43","line":114,"column":66,"nodeType":"41","messageId":"42","endLine":114,"endColumn":68},{"ruleId":"39","severity":1,"message":"43","line":114,"column":123,"nodeType":"41","messageId":"42","endLine":114,"endColumn":125},{"ruleId":"30","severity":1,"message":"44","line":141,"column":15,"nodeType":"32","messageId":"33","endLine":141,"endColumn":24},{"ruleId":"45","severity":1,"message":"46","line":166,"column":15,"nodeType":"47","endLine":166,"endColumn":19},{"ruleId":"30","severity":1,"message":"48","line":3,"column":10,"nodeType":"32","messageId":"33","endLine":3,"endColumn":19},{"ruleId":"30","severity":1,"message":"49","line":3,"column":21,"nodeType":"32","messageId":"33","endLine":3,"endColumn":24},"no-unused-vars","'dimensions' is assigned a value but never used.","Identifier","unusedVar","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'csvToJsonResult' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'csvString' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'selectAll' is defined but never used.","'svg' is defined but never used."]